@page "/schedule"

<PageTitle>Excursion Schedule</PageTitle>
@rendermode InteractiveServer

@using eToursWebApp.Model

<h1>Excursion Schedule</h1>

@if (FeedbackMsg.Length > 0)
{
    <div class="alert alert-info">
        <p>@FeedbackMsg</p>
    </div>
}

@if (ErrorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in ErrorMsgs)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<!--
    Activity 2
    create a table display for the data, see image in assessment specifications for layout
    create separate messages if a) the data file does not exist
                                b) the data file exists but is empty 
-->
@if (Excursions.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Hours</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var excursion in Excursions)
            {
                <tr>
                    <td>@excursion.Name</td>
                    <td>@excursion.ExcursionDate.ToString("MMM-dd-yyyy")</td>
                    <td>@excursion.Duration</td>
                    <td>@excursion.TourType</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div>
        Display of excursions
    </div>
}


@code {
    string FeedbackMsg = "";
    List<string> ErrorMsgs = new List<string>();
    List<Excursion> Excursions = new();


    protected override void OnInitialized()
    {
        base.OnInitialized();

        //test files for assessment

        string filename = @"./Data/eTourGood.csv";
        // string filename = @"./Data/eTourEmpty.csv";
        //string filename = @"./Data/eTourGoodBad.csv";
        // string filename = @"./Data/eTourNotThere.csv";

        //Activity 2

        //write the code to 
        //  a) read the file
		//  b) all records in the file must be handled, processed as good or bad
        //  c) place good records in a collection to display in the table above
        //  d) user friendly error handling is required.
        try
        {
            if (!File.Exists(filename))
            {
                ErrorMsgs.Add("The data file does not exist.");
                return;
            }

            var lines = File.ReadAllLines(filename);
            if (lines.Length == 0)
            {
                ErrorMsgs.Add("The data file is empty.");
                return;
            }

            foreach (var line in lines)
            {
                try
                {
                    var ex = Excursion.Parse(line);
                    Excursions.Add(ex);
                }
                catch (Exception ex)
                {
                    ErrorMsgs.Add(ex.Message);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMsgs.Add(GetInnerException(ex).Message);
        }

    }

    Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }
}
