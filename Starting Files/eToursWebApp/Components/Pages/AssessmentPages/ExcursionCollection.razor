@page "/collection"

<PageTitle>Excursion Collection</PageTitle>
@rendermode InteractiveServer

@using eToursWebApp.Model;


<h1>Excursion Collection</h1>

@if (FeedbackMsg.Length > 0)
{
    <div class="alert alert-info">
        <p>@FeedbackMsg</p>
    </div>
}

@if (ErrorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in ErrorMsgs)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- 
Activity 3

Create the input form as shown in the Assment descritpion (exact layout is not required)
Use the enum class to create the select control

-->
<form>
    <fieldset>
        <div>
            <label for="name">Excursion Name</label>
            <input id="name" type="text" @bind="ExcursionName" />
        </div>
        <div>
            <label for="duration">Excursion Duration in hours</label>
            <input id="duration" type="number" @bind="ExcursionDurationString" />
        </div>
        <div>
            <label for="date">Excursion Date</label>
            <input id="date" type="date" @bind="ExcursionDate" />
        </div>
        <div>
            <label for="type">Excursion Type</label>
            <select id="type" @bind="ExcursionTypeValue">
                @foreach (var type in Enum.GetValues(typeof(ExcursionType)))
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
        <div style="margin-top:1em;">
            <button type="button" @onclick="SaveExcursion">Submit</button>
            <button type="button" @onclick="ClearForm" style="margin-left:1em;">Clear</button>
        </div>
    </fieldset>
</form>


@code {
    string FeedbackMsg = "";
    List<string> ErrorMsgs = new List<string>();

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    // Activity 3

    // add any require variables to process your form
    string ExcursionName = "";
    string ExcursionDurationString = "0";
    DateTime ExcursionDate = DateTime.Today;
    string ExcursionTypeValue = ExcursionType.Walk.ToString();

    protected override void OnInitialized()
    { 
        base.OnInitialized();
        // Activity 3

        // default excursion date to Today
        ExcursionDate = DateTime.Today;
    }

    Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    //Activity 3

    // Add 1 event method for collecting, validating and saving data.
    void SaveExcursion()
    {
        ErrorMsgs.Clear();
        FeedbackMsg = "";

        double duration;
        if (!double.TryParse(ExcursionDurationString, out duration) || duration <= 0)
        {
            ErrorMsgs.Add("excursion time must be greater than 0.");
        }

        if (string.IsNullOrWhiteSpace(ExcursionName))
        {
            ErrorMsgs.Add("Name is needed.");
        }

        if (ExcursionDate < DateTime.Today)
        {
            ErrorMsgs.Add("start date cannot be in the past.");
        }

        if (ErrorMsgs.Count == 0)
        {
            try
            {
                ExcursionType type = Enum.Parse<ExcursionType>(ExcursionTypeValue);
                var ex = new Excursion(ExcursionName, ExcursionDate, duration, type);

                FeedbackMsg = "your data is now saved to the file.";
            }
            catch (Exception ex)
            {
                ErrorMsgs.Add(GetInnerException(ex).Message);
            }
        }
    }

    // Add 1 event method to clear the form. Must require confirmation from user as demonstrated in class.
    async void ClearForm()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "clear form? unsaved changes will be lost.");
        if (confirmed)
        {
            ExcursionName = "";
            ExcursionDurationString = "0";
            ExcursionDate = DateTime.Today;
            ExcursionTypeValue = ExcursionType.Walk.ToString();
            ErrorMsgs.Clear();
            FeedbackMsg = "";
        }
    }
}


